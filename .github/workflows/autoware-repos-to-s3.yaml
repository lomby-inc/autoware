name: Upload to S3 and Deploy to Greengrass

# on: workflow_dispatch
#   # uncomment below to enable the workflow
#   # push:
#   #   branches:
#   #     - release/lomby/2024.10/2024.12
on:
  push:
    branches:
      - feat/MAS-508
    paths:
      - 'autoware.repos'

jobs:
  upload-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload new 'autoware.repos' file to 'latest' and 'archive'
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          aws s3 cp autoware.repos s3://lomby-greengrass/autoware-repos-updates/latest/autoware.repos
          aws s3 cp autoware.repos s3://lomby-greengrass/autoware-repos-updates/archive/$TIMESTAMP-autoware.repos

      - name: Create Greengrass Deployment
        id: create_deployment
        run: |
          DEPLOYMENT_NAME="AutowareReposUpdate-$(date +%Y-%m-%d-%H-%M-%S)"
          # Deployment to specific core device
          aws greengrassv2 create-deployment \
            --target-arn arn:aws:iot:ap-northeast-1:${{ secrets.AWS_ACCOUNT_ID }}:thing/lma2-unit-6 \
            --deployment-name "$DEPLOYMENT_NAME" \
            --components '{"AutowareReposUpdater": {"componentVersion": "1.0.1"}}' \
            --region ap-northeast-1

      - name: Check Deployment Status
        id: check_status
        run: |
          # For specific core device deployment
          DEPLOYMENT_ID=$(aws greengrassv2 list-deployments --target-arn arn:aws:iot:ap-northeast-1:${{ secrets.AWS_ACCOUNT_ID }}:thing/lma2-unit-6 --query 'deployments[0].deploymentId' --output text)
          
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws greengrassv2 get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentStatus' --output text)
            echo "Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS: Deployment Status: $STATUS"
            
            if [ "$STATUS" == "COMPLETED" ]; then
              echo "::set-output name=status::SUCCESS"
              break
            elif [ "$STATUS" == "FAILED" ]; then
              echo "::set-output name=status::FAILED"
              break
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            sleep 20
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "::set-output name=status::TIMEOUT"
          fi

      - name: Notify User of Deployment Status
        run: |
          if [ "${{ steps.check_status.outputs.status }}" == "SUCCESS" ]; then
            echo "Deployment was successful! Colcon build should be running on the device."
          elif [ "${{ steps.check_status.outputs.status }}" == "TIMEOUT" ]; then
            echo "Deployment timed out after checking for 10 minutes."
            exit 1
          else
            echo "Deployment failed with status: ${{ steps.check_status.outputs.status }}."
            exit 1
          fi
