name: Upload to S3 and Deploy to Greengrass

on:
  push:
    branches:
      - feat/MAS-508
    paths:
      - 'autoware.repos'

jobs:
  upload-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload new 'autoware.repos' file
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          aws s3 cp autoware.repos s3://lomby-greengrass/autoware-repos-updates/latest/autoware.repos
          aws s3 cp autoware.repos s3://lomby-greengrass/autoware-repos-updates/archive/$TIMESTAMP-autoware.repos

      - name: Create Greengrass Deployment
        id: create_deployment
        run: |
          DEPLOYMENT_ID=$(aws greengrassv2 create-deployment \
            --target-arn arn:aws:iot:ap-northeast-1:${{ secrets.AWS_ACCOUNT_ID }}:thing/lma2-unit-6 \
            --deployment-name "AutowareReposUpdate-$(date +%Y-%m-%d-%H-%M-%S)" \
            --components '{"AutowareReposUpdater": {"componentVersion": "2.0.0", "configuration": {"DeploymentID": "$DEPLOYMENT_ID"}}}' \
            --region ap-northeast-1 \
            --query 'deploymentId' \
            --output text)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          echo "::set-output name=deployment_id::$DEPLOYMENT_ID"

      - name: Check Deployment Status
        id: check_status
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws greengrassv2 get-deployment \
              --deployment-id ${{ env.DEPLOYMENT_ID }} \
              --query 'deploymentStatus' \
              --output text)
            
            echo "Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS: Status: $STATUS"
            
            if [ "$STATUS" = "COMPLETED" ]; then
              echo "::set-output name=status::SUCCESS"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "::set-output name=status::FAILED"
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            sleep 20
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "::set-output name=status::TIMEOUT"
            exit 1
          fi

      - name: Monitor Colcon Build
        id: monitor_build
        run: |
          MAX_ATTEMPTS=60
          ATTEMPT=0
          STATUS_FILE="autoware-repos-updates/build-status/${{ env.DEPLOYMENT_ID }}-status.txt"
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            aws s3 ls s3://lomby-greengrass/$STATUS_FILE && {
              aws s3 cp s3://lomby-greengrass/$STATUS_FILE build_status.txt
              STATUS=$(cat build_status.txt)
              echo "::set-output name=build_status::$STATUS"
              break
            }
            ATTEMPT=$((ATTEMPT+1))
            sleep 20
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "::set-output name=build_status::TIMEOUT"
          fi

      #yet to implement
      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_COLOR: ${{ contains(steps.monitor_build.outputs.build_status, 'SUCCESS') && 'good' || 'danger' }}
      #     SLACK_TITLE: "Build Status: ${{ steps.monitor_build.outputs.build_status }}"
      #     SLACK_MESSAGE: |
      #       *Deployment ID*: ${DEPLOYMENT_ID:0:6}...${DEPLOYMENT_ID: -6}
      #       *Duration*: $((ATTEMPT * 20))s
      #       *Result*: ${{ steps.monitor_build.outputs.build_status }}
      #   if: always()

      - name: Final Status
        run: |
          case "${{ steps.monitor_build.outputs.build_status }}" in
            "SUCCESS") echo "All steps completed successfully" ;;
            "FAILED") echo "Build failed" && exit 1 ;;
            "TIMEOUT") echo "Build timed out" && exit 1 ;;
            *) echo "Unknown status" && exit 1 ;;
          esac
